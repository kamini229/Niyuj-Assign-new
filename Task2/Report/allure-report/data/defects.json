{
  "defectsList" : [ {
    "title" : "Product defects",
    "status" : "FAILED",
    "defects" : [ {
      "uid" : "b98bb37b0eaefc64",
      "failure" : {
        "message" : "AssertionError: assert 'New Apple Ma...Latest Model)' == 'Macbook pro'\n  - Macbook pro\n  + New Apple MacBook Pro with Apple M1 Chip (13-inch, 8GB RAM, 256GB SSD) - Silver (Latest Model)",
        "stackTrace" : "self = <testcases.product_details_test.TestProductDetailsPage object at 0x7f70d74d5470>, setUp = None\n\n    def test_product_title(self, setUp):\n        home_object = Home(self.driver)\n        home_object.enterTextIntoSearchBox(\"Macbook pro\")\n        home_object.clickSearchIcon()\n        time.sleep(5)\n        parent_window = self.driver.current_window_handle\n        print(parent_window)\n    \n        product_page = Products(self.driver)\n        product_page.clickFirstSearchedProduct()\n    \n        time.sleep(3)\n        windows_set = self.driver.window_handles\n        print(windows_set)\n    \n        for window in windows_set:\n            if (window != parent_window):\n                self.driver.switch_to.window(window)\n                self.driver.save_screenshot(\n                    \"/home/kamini/Documents/Niyuj-assignment/Task2/screenshots/\" +\n                    str(random.random() * 10000).split('.')[0] + \".png\")\n    \n        product_detail_object = ProductDetails(self.driver)\n>       assert product_detail_object.getProductTitle() == \"Macbook pro\"\nE       AssertionError: assert 'New Apple Ma...Latest Model)' == 'Macbook pro'\nE         - Macbook pro\nE         + New Apple MacBook Pro with Apple M1 Chip (13-inch, 8GB RAM, 256GB SSD) - Silver (Latest Model)\n\ntestcases/product_details_test.py:48: AssertionError"
      },
      "testCases" : [ {
        "uid" : "dfd932156896a7d6",
        "name" : "product_details_test.TestProductDetailsPage.test_product_title",
        "title" : "Test product title",
        "time" : {
          "start" : 1611738140925,
          "stop" : 1611738156651,
          "duration" : 15726
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      } ]
    }, {
      "uid" : "7d8647955ce0475c",
      "failure" : {
        "message" : "AssertionError: assert '₹ 10,799.00' == '1,27,990.00'\n  - 1,27,990.00\n  + ₹ 10,799.00",
        "stackTrace" : "self = <testcases.product_details_test.TestProductDetailsPage object at 0x7f70d9b50320>, setUp = None\n\n    def test_product_price(self, setUp):\n        home_object = Home(self.driver)\n        home_object.enterTextIntoSearchBox(\"Macbook pro\")\n        home_object.clickSearchIcon()\n        time.sleep(5)\n    \n        parent_window = self.driver.current_window_handle\n        print(parent_window)\n    \n        product_page = Products(self.driver)\n        product_page.clickFirstSearchedProduct()\n    \n        time.sleep(3)\n        windows_set = self.driver.window_handles\n        print(windows_set)\n    \n        for window in windows_set:\n            if (window != parent_window):\n                self.driver.switch_to.window(window)\n                self.driver.save_screenshot(\n                    \"/home/kamini/Documents/Niyuj-assignment/Task2/screenshots/\" +\n                    str(random.random() * 10000).split('.')[0] + \".png\")\n    \n        product_detail_object = ProductDetails(self.driver)\n        product_price = product_detail_object.getProductPrice()\n    \n>       assert product_price == \"1,27,990.00\"\nE       AssertionError: assert '₹ 10,799.00' == '1,27,990.00'\nE         - 1,27,990.00\nE         + ₹ 10,799.00\n\ntestcases/product_details_test.py:76: AssertionError"
      },
      "testCases" : [ {
        "uid" : "34db2d0ae01fd13b",
        "name" : "product_details_test.TestProductDetailsPage.test_product_price",
        "title" : "Test product price",
        "time" : {
          "start" : 1611738156796,
          "stop" : 1611738167629,
          "duration" : 10833
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      } ]
    } ]
  }, {
    "title" : "Test defects",
    "status" : "BROKEN",
    "defects" : [ ]
  } ]
}